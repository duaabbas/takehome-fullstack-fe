{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abbas\\\\VS\\\\takehome-fullstack-fe\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF', '#4BC0C0', '#36A2EB'];\nconst WS_URL = 'ws://localhost:5000/ws';\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const lastUpdateRef = useRef(Date.now());\n  const updateCountRef = useRef(0);\n  const connectWebSocket = useCallback(() => {\n    var _wsRef$current;\n    if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.OPEN) return;\n    const ws = new WebSocket(WS_URL);\n    ws.onopen = () => {\n      console.log('Connected to backend');\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n    };\n    ws.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        console.log('Received message:', message); // Debug log\n\n        if (message.type === 'history') {\n          // Handle historical data\n          if (message.payload && Array.isArray(message.payload)) {\n            const chartData = message.payload.map(point => ({\n              time: new Date(point.Timestamp || point.timestamp).getTime(),\n              ...point.Values.reduce((acc, val, idx) => ({\n                ...acc,\n                [`ch${idx}`]: val\n              }), {})\n            }));\n            setData(chartData);\n          }\n        } else if (message.type === 'data') {\n          // Handle real-time data\n          if (message.payload) {\n            const point = message.payload;\n            const newPoint = {\n              time: new Date(point.Timestamp || point.timestamp).getTime(),\n              ...point.Values.reduce((acc, val, idx) => ({\n                ...acc,\n                [`ch${idx}`]: val\n              }), {})\n            };\n            setData(prevData => {\n              const updated = [...prevData, newPoint];\n              const cutoff = Date.now() - 30000; // 30 seconds\n              const filtered = updated.filter(d => d.time > cutoff);\n\n              // Update stats\n              updateCountRef.current++;\n              const now = Date.now();\n              if (now - lastUpdateRef.current >= 1000) {\n                updateCountRef.current = 0;\n                lastUpdateRef.current = now;\n              }\n              return filtered;\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n        console.error('Raw message:', event.data);\n      }\n    };\n    ws.onclose = () => {\n      console.log('Disconnected from backend');\n      wsRef.current = null;\n\n      // Attempt to reconnect after 3 seconds\n      reconnectTimeoutRef.current = setTimeout(() => {\n        console.log('Attempting to reconnect...');\n        connectWebSocket();\n      }, 3000);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    wsRef.current = ws;\n  }, []);\n  useEffect(() => {\n    connectWebSocket();\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [connectWebSocket]);\n  const formatXAxisTick = tickItem => {\n    const date = new Date(tickItem);\n    return date.toLocaleTimeString();\n  };\n  const formatTooltipLabel = value => {\n    const date = new Date(value);\n    return date.toLocaleTimeString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Real-Time Data Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Channel Data (Last 30 seconds)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), data.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 500,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: data,\n            margin: {\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"#f0f0f0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"time\",\n              type: \"number\",\n              domain: ['dataMin', 'dataMax'],\n              tickFormatter: formatXAxisTick,\n              stroke: \"#666\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: [0, 25],\n              stroke: \"#666\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              labelFormatter: formatTooltipLabel,\n              formatter: value => value === null || value === void 0 ? void 0 : value.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this), [...Array(10)].map((_, i) => /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: `ch${i}`,\n              stroke: COLORS[i],\n              name: `Channel ${i}`,\n              dot: false,\n              strokeWidth: 2,\n              isAnimationActive: false\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 500,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Waiting for data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xa1DcYPgCLygDkXGmJa7wdvYwG4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","COLORS","WS_URL","App","_s","data","setData","wsRef","reconnectTimeoutRef","lastUpdateRef","Date","now","updateCountRef","connectWebSocket","_wsRef$current","current","readyState","WebSocket","OPEN","ws","onopen","console","log","clearTimeout","onmessage","event","message","JSON","parse","type","payload","Array","isArray","chartData","map","point","time","Timestamp","timestamp","getTime","Values","reduce","acc","val","idx","newPoint","prevData","updated","cutoff","filtered","filter","d","error","onclose","setTimeout","onerror","close","formatXAxisTick","tickItem","date","toLocaleTimeString","formatTooltipLabel","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","width","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","domain","tickFormatter","labelFormatter","formatter","toFixed","_","i","name","dot","strokeWidth","isAnimationActive","style","display","alignItems","justifyContent","_c","$RefreshReg$"],"sources":["C:/Users/abbas/VS/takehome-fullstack-fe/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport './App.css';\r\n\r\nconst COLORS = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', \r\n                '#FF9F40', '#FF6384', '#C9CBCF', '#4BC0C0', '#36A2EB'];\r\n\r\nconst WS_URL = 'ws://localhost:5000/ws';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const wsRef = useRef(null);\r\n  const reconnectTimeoutRef = useRef(null);\r\n  const lastUpdateRef = useRef(Date.now());\r\n  const updateCountRef = useRef(0);\r\n\r\n  const connectWebSocket = useCallback(() => {\r\n    if (wsRef.current?.readyState === WebSocket.OPEN) return;\r\n\r\n    const ws = new WebSocket(WS_URL);\r\n    \r\n    ws.onopen = () => {\r\n      console.log('Connected to backend');\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n        reconnectTimeoutRef.current = null;\r\n      }\r\n    };\r\n\r\n    ws.onmessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data);\r\n        console.log('Received message:', message); // Debug log\r\n        \r\n        if (message.type === 'history') {\r\n          // Handle historical data\r\n          if (message.payload && Array.isArray(message.payload)) {\r\n            const chartData = message.payload.map(point => ({\r\n              time: new Date(point.Timestamp || point.timestamp).getTime(),\r\n              ...point.Values.reduce((acc, val, idx) => ({\r\n                ...acc,\r\n                [`ch${idx}`]: val\r\n              }), {})\r\n            }));\r\n            setData(chartData);\r\n          }\r\n        } else if (message.type === 'data') {\r\n          // Handle real-time data\r\n          if (message.payload) {\r\n            const point = message.payload;\r\n            const newPoint = {\r\n              time: new Date(point.Timestamp || point.timestamp).getTime(),\r\n              ...point.Values.reduce((acc, val, idx) => ({\r\n                ...acc,\r\n                [`ch${idx}`]: val\r\n              }), {})\r\n            };\r\n            \r\n            setData(prevData => {\r\n              const updated = [...prevData, newPoint];\r\n              const cutoff = Date.now() - 30000; // 30 seconds\r\n              const filtered = updated.filter(d => d.time > cutoff);\r\n              \r\n              // Update stats\r\n              updateCountRef.current++;\r\n              const now = Date.now();\r\n              if (now - lastUpdateRef.current >= 1000) {\r\n                updateCountRef.current = 0;\r\n                lastUpdateRef.current = now;\r\n              }\r\n              \r\n              return filtered;\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing message:', error);\r\n        console.error('Raw message:', event.data);\r\n      }\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      console.log('Disconnected from backend');\r\n      wsRef.current = null;\r\n      \r\n      // Attempt to reconnect after 3 seconds\r\n      reconnectTimeoutRef.current = setTimeout(() => {\r\n        console.log('Attempting to reconnect...');\r\n        connectWebSocket();\r\n      }, 3000);\r\n    };\r\n\r\n    ws.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n\r\n    wsRef.current = ws;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n      }\r\n      if (wsRef.current) {\r\n        wsRef.current.close();\r\n      }\r\n    };\r\n  }, [connectWebSocket]);\r\n\r\n  const formatXAxisTick = (tickItem) => {\r\n    const date = new Date(tickItem);\r\n    return date.toLocaleTimeString();\r\n  };\r\n\r\n  const formatTooltipLabel = (value) => {\r\n    const date = new Date(value);\r\n    return date.toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n        <h1>Real-Time Data Visualization</h1>\r\n      </header>\r\n      \r\n      <main className=\"app-main\">\r\n        <div className=\"chart-container\">\r\n          <h2>Channel Data (Last 30 seconds)</h2>\r\n          {data.length > 0 ? (\r\n            <ResponsiveContainer width=\"100%\" height={500}>\r\n              <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\r\n                <XAxis \r\n                  dataKey=\"time\" \r\n                  type=\"number\"\r\n                  domain={['dataMin', 'dataMax']}\r\n                  tickFormatter={formatXAxisTick}\r\n                  stroke=\"#666\"\r\n                />\r\n                <YAxis \r\n                  domain={[0, 25]} \r\n                  stroke=\"#666\"\r\n                />\r\n                <Tooltip \r\n                  labelFormatter={formatTooltipLabel}\r\n                  formatter={(value) => value?.toFixed(2)}\r\n                />\r\n                <Legend />\r\n                {[...Array(10)].map((_, i) => (\r\n                  <Line\r\n                    key={i}\r\n                    type=\"monotone\"\r\n                    dataKey={`ch${i}`}\r\n                    stroke={COLORS[i]}\r\n                    name={`Channel ${i}`}\r\n                    dot={false}\r\n                    strokeWidth={2}\r\n                    isAnimationActive={false}\r\n                  />\r\n                ))}\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          ) : (\r\n            <div style={{ height: 500, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              <p>Waiting for data...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}